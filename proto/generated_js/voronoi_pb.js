/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var descriptor_pb = require('./descriptor_pb.js');
goog.exportSymbol('proto.voronoi.Db', null, global);
goog.exportSymbol('proto.voronoi.LatLng', null, global);
goog.exportSymbol('proto.voronoi.Linear', null, global);
goog.exportSymbol('proto.voronoi.Polygon', null, global);
goog.exportSymbol('proto.voronoi.User', null, global);
goog.exportSymbol('proto.voronoi.Visibility', null, global);
goog.exportSymbol('proto.voronoi.Voronoi', null, global);
goog.exportSymbol('proto.voronoi.visibility', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.voronoi.LatLng = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.voronoi.LatLng, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.voronoi.LatLng.displayName = 'proto.voronoi.LatLng';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.voronoi.LatLng.prototype.toObject = function(opt_includeInstance) {
  return proto.voronoi.LatLng.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.voronoi.LatLng} msg The msg instance to transform.
 * @return {!Object}
 */
proto.voronoi.LatLng.toObject = function(includeInstance, msg) {
  var f, obj = {
    lat: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    lng: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.voronoi.LatLng}
 */
proto.voronoi.LatLng.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.voronoi.LatLng;
  return proto.voronoi.LatLng.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.voronoi.LatLng} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.voronoi.LatLng}
 */
proto.voronoi.LatLng.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLat(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLng(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.voronoi.LatLng.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.voronoi.LatLng.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.voronoi.LatLng} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.voronoi.LatLng.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLat();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getLng();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double lat = 1;
 * @return {number}
 */
proto.voronoi.LatLng.prototype.getLat = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.voronoi.LatLng.prototype.setLat = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional double lng = 2;
 * @return {number}
 */
proto.voronoi.LatLng.prototype.getLng = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.voronoi.LatLng.prototype.setLng = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.voronoi.Linear = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.voronoi.Linear, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.voronoi.Linear.displayName = 'proto.voronoi.Linear';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.voronoi.Linear.prototype.toObject = function(opt_includeInstance) {
  return proto.voronoi.Linear.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.voronoi.Linear} msg The msg instance to transform.
 * @return {!Object}
 */
proto.voronoi.Linear.toObject = function(includeInstance, msg) {
  var f, obj = {
    t0S: jspb.Message.getFieldWithDefault(msg, 1, 0),
    y0: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    dy: +jspb.Message.getFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.voronoi.Linear}
 */
proto.voronoi.Linear.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.voronoi.Linear;
  return proto.voronoi.Linear.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.voronoi.Linear} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.voronoi.Linear}
 */
proto.voronoi.Linear.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setT0S(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY0(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.voronoi.Linear.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.voronoi.Linear.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.voronoi.Linear} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.voronoi.Linear.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getT0S();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getY0();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getDy();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional int64 t0_s = 1;
 * @return {number}
 */
proto.voronoi.Linear.prototype.getT0S = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.voronoi.Linear.prototype.setT0S = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional double y0 = 2;
 * @return {number}
 */
proto.voronoi.Linear.prototype.getY0 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.voronoi.Linear.prototype.setY0 = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional double dy = 3;
 * @return {number}
 */
proto.voronoi.Linear.prototype.getDy = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.voronoi.Linear.prototype.setDy = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.voronoi.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.voronoi.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.voronoi.User.displayName = 'proto.voronoi.User';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.voronoi.User.prototype.toObject = function(opt_includeInstance) {
  return proto.voronoi.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.voronoi.User} msg The msg instance to transform.
 * @return {!Object}
 */
proto.voronoi.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    totem: (f = msg.getTotem()) && proto.voronoi.LatLng.toObject(includeInstance, f),
    score: (f = msg.getScore()) && proto.voronoi.Linear.toObject(includeInstance, f),
    email: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.voronoi.User}
 */
proto.voronoi.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.voronoi.User;
  return proto.voronoi.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.voronoi.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.voronoi.User}
 */
proto.voronoi.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.voronoi.LatLng;
      reader.readMessage(value,proto.voronoi.LatLng.deserializeBinaryFromReader);
      msg.setTotem(value);
      break;
    case 4:
      var value = new proto.voronoi.Linear;
      reader.readMessage(value,proto.voronoi.Linear.deserializeBinaryFromReader);
      msg.setScore(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.voronoi.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.voronoi.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.voronoi.User} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.voronoi.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTotem();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.voronoi.LatLng.serializeBinaryToWriter
    );
  }
  f = message.getScore();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.voronoi.Linear.serializeBinaryToWriter
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.voronoi.User.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.voronoi.User.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.voronoi.User.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.voronoi.User.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional LatLng totem = 3;
 * @return {?proto.voronoi.LatLng}
 */
proto.voronoi.User.prototype.getTotem = function() {
  return /** @type{?proto.voronoi.LatLng} */ (
    jspb.Message.getWrapperField(this, proto.voronoi.LatLng, 3));
};


/** @param {?proto.voronoi.LatLng|undefined} value */
proto.voronoi.User.prototype.setTotem = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.voronoi.User.prototype.clearTotem = function() {
  this.setTotem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.voronoi.User.prototype.hasTotem = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Linear score = 4;
 * @return {?proto.voronoi.Linear}
 */
proto.voronoi.User.prototype.getScore = function() {
  return /** @type{?proto.voronoi.Linear} */ (
    jspb.Message.getWrapperField(this, proto.voronoi.Linear, 4));
};


/** @param {?proto.voronoi.Linear|undefined} value */
proto.voronoi.User.prototype.setScore = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.voronoi.User.prototype.clearScore = function() {
  this.setScore(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.voronoi.User.prototype.hasScore = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string email = 5;
 * @return {string}
 */
proto.voronoi.User.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.voronoi.User.prototype.setEmail = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.voronoi.Polygon = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.voronoi.Polygon.repeatedFields_, null);
};
goog.inherits(proto.voronoi.Polygon, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.voronoi.Polygon.displayName = 'proto.voronoi.Polygon';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.voronoi.Polygon.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.voronoi.Polygon.prototype.toObject = function(opt_includeInstance) {
  return proto.voronoi.Polygon.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.voronoi.Polygon} msg The msg instance to transform.
 * @return {!Object}
 */
proto.voronoi.Polygon.toObject = function(includeInstance, msg) {
  var f, obj = {
    pointList: jspb.Message.toObjectList(msg.getPointList(),
    proto.voronoi.LatLng.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.voronoi.Polygon}
 */
proto.voronoi.Polygon.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.voronoi.Polygon;
  return proto.voronoi.Polygon.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.voronoi.Polygon} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.voronoi.Polygon}
 */
proto.voronoi.Polygon.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.voronoi.LatLng;
      reader.readMessage(value,proto.voronoi.LatLng.deserializeBinaryFromReader);
      msg.addPoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.voronoi.Polygon.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.voronoi.Polygon.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.voronoi.Polygon} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.voronoi.Polygon.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.voronoi.LatLng.serializeBinaryToWriter
    );
  }
};


/**
 * repeated LatLng point = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.voronoi.LatLng>}
 */
proto.voronoi.Polygon.prototype.getPointList = function() {
  return /** @type{!Array.<!proto.voronoi.LatLng>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.voronoi.LatLng, 1));
};


/** @param {!Array.<!proto.voronoi.LatLng>} value */
proto.voronoi.Polygon.prototype.setPointList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.voronoi.LatLng=} opt_value
 * @param {number=} opt_index
 * @return {!proto.voronoi.LatLng}
 */
proto.voronoi.Polygon.prototype.addPoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.voronoi.LatLng, opt_index);
};


proto.voronoi.Polygon.prototype.clearPointList = function() {
  this.setPointList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.voronoi.Voronoi = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.voronoi.Voronoi.repeatedFields_, null);
};
goog.inherits(proto.voronoi.Voronoi, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.voronoi.Voronoi.displayName = 'proto.voronoi.Voronoi';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.voronoi.Voronoi.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.voronoi.Voronoi.prototype.toObject = function(opt_includeInstance) {
  return proto.voronoi.Voronoi.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.voronoi.Voronoi} msg The msg instance to transform.
 * @return {!Object}
 */
proto.voronoi.Voronoi.toObject = function(includeInstance, msg) {
  var f, obj = {
    totemList: jspb.Message.toObjectList(msg.getTotemList(),
    proto.voronoi.LatLng.toObject, includeInstance),
    userIdList: jspb.Message.getField(msg, 2),
    regionList: jspb.Message.toObjectList(msg.getRegionList(),
    proto.voronoi.Polygon.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.voronoi.Voronoi}
 */
proto.voronoi.Voronoi.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.voronoi.Voronoi;
  return proto.voronoi.Voronoi.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.voronoi.Voronoi} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.voronoi.Voronoi}
 */
proto.voronoi.Voronoi.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.voronoi.LatLng;
      reader.readMessage(value,proto.voronoi.LatLng.deserializeBinaryFromReader);
      msg.addTotem(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addUserId(value);
      break;
    case 3:
      var value = new proto.voronoi.Polygon;
      reader.readMessage(value,proto.voronoi.Polygon.deserializeBinaryFromReader);
      msg.addRegion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.voronoi.Voronoi.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.voronoi.Voronoi.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.voronoi.Voronoi} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.voronoi.Voronoi.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotemList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.voronoi.LatLng.serializeBinaryToWriter
    );
  }
  f = message.getUserIdList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getRegionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.voronoi.Polygon.serializeBinaryToWriter
    );
  }
};


/**
 * repeated LatLng totem = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.voronoi.LatLng>}
 */
proto.voronoi.Voronoi.prototype.getTotemList = function() {
  return /** @type{!Array.<!proto.voronoi.LatLng>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.voronoi.LatLng, 1));
};


/** @param {!Array.<!proto.voronoi.LatLng>} value */
proto.voronoi.Voronoi.prototype.setTotemList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.voronoi.LatLng=} opt_value
 * @param {number=} opt_index
 * @return {!proto.voronoi.LatLng}
 */
proto.voronoi.Voronoi.prototype.addTotem = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.voronoi.LatLng, opt_index);
};


proto.voronoi.Voronoi.prototype.clearTotemList = function() {
  this.setTotemList([]);
};


/**
 * repeated string user_id = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.voronoi.Voronoi.prototype.getUserIdList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<string>} value */
proto.voronoi.Voronoi.prototype.setUserIdList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.voronoi.Voronoi.prototype.addUserId = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.voronoi.Voronoi.prototype.clearUserIdList = function() {
  this.setUserIdList([]);
};


/**
 * repeated Polygon region = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.voronoi.Polygon>}
 */
proto.voronoi.Voronoi.prototype.getRegionList = function() {
  return /** @type{!Array.<!proto.voronoi.Polygon>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.voronoi.Polygon, 3));
};


/** @param {!Array.<!proto.voronoi.Polygon>} value */
proto.voronoi.Voronoi.prototype.setRegionList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.voronoi.Polygon=} opt_value
 * @param {number=} opt_index
 * @return {!proto.voronoi.Polygon}
 */
proto.voronoi.Voronoi.prototype.addRegion = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.voronoi.Polygon, opt_index);
};


proto.voronoi.Voronoi.prototype.clearRegionList = function() {
  this.setRegionList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.voronoi.Db = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.voronoi.Db.repeatedFields_, null);
};
goog.inherits(proto.voronoi.Db, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.voronoi.Db.displayName = 'proto.voronoi.Db';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.voronoi.Db.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.voronoi.Db.prototype.toObject = function(opt_includeInstance) {
  return proto.voronoi.Db.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.voronoi.Db} msg The msg instance to transform.
 * @return {!Object}
 */
proto.voronoi.Db.toObject = function(includeInstance, msg) {
  var f, obj = {
    userList: jspb.Message.toObjectList(msg.getUserList(),
    proto.voronoi.User.toObject, includeInstance),
    voronoi: (f = msg.getVoronoi()) && proto.voronoi.Voronoi.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.voronoi.Db}
 */
proto.voronoi.Db.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.voronoi.Db;
  return proto.voronoi.Db.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.voronoi.Db} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.voronoi.Db}
 */
proto.voronoi.Db.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.voronoi.User;
      reader.readMessage(value,proto.voronoi.User.deserializeBinaryFromReader);
      msg.addUser(value);
      break;
    case 2:
      var value = new proto.voronoi.Voronoi;
      reader.readMessage(value,proto.voronoi.Voronoi.deserializeBinaryFromReader);
      msg.setVoronoi(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.voronoi.Db.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.voronoi.Db.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.voronoi.Db} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.voronoi.Db.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.voronoi.User.serializeBinaryToWriter
    );
  }
  f = message.getVoronoi();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.voronoi.Voronoi.serializeBinaryToWriter
    );
  }
};


/**
 * repeated User user = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.voronoi.User>}
 */
proto.voronoi.Db.prototype.getUserList = function() {
  return /** @type{!Array.<!proto.voronoi.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.voronoi.User, 1));
};


/** @param {!Array.<!proto.voronoi.User>} value */
proto.voronoi.Db.prototype.setUserList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.voronoi.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.voronoi.User}
 */
proto.voronoi.Db.prototype.addUser = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.voronoi.User, opt_index);
};


proto.voronoi.Db.prototype.clearUserList = function() {
  this.setUserList([]);
};


/**
 * optional Voronoi voronoi = 2;
 * @return {?proto.voronoi.Voronoi}
 */
proto.voronoi.Db.prototype.getVoronoi = function() {
  return /** @type{?proto.voronoi.Voronoi} */ (
    jspb.Message.getWrapperField(this, proto.voronoi.Voronoi, 2));
};


/** @param {?proto.voronoi.Voronoi|undefined} value */
proto.voronoi.Db.prototype.setVoronoi = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.voronoi.Db.prototype.clearVoronoi = function() {
  this.setVoronoi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.voronoi.Db.prototype.hasVoronoi = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.voronoi.Visibility = {
  PUBLIC: 0,
  PRIVATE: 1
};


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `visibility`.
 * @type {!jspb.ExtensionFieldInfo.<!proto.voronoi.Visibility>}
 */
proto.voronoi.visibility = new jspb.ExtensionFieldInfo(
    314150,
    {visibility: 0},
    null,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         null),
    0);

descriptor_pb.FieldOptions.extensionsBinary[314150] = new jspb.ExtensionFieldBinaryInfo(
    proto.voronoi.visibility,
    jspb.BinaryReader.prototype.readEnum,
    jspb.BinaryWriter.prototype.writeEnum,
    undefined,
    undefined,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
descriptor_pb.FieldOptions.extensions[314150] = proto.voronoi.visibility;

goog.object.extend(exports, proto.voronoi);
